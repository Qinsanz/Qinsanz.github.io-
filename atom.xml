<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年少壮志不言愁</title>
  
  <subtitle>！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-11T15:09:47.638Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>青山</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA基础</title>
    <link href="http://yoursite.com/2020/01/11/JAVA%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/01/11/JAVA基础/</id>
    <published>2020-01-11T15:07:01.000Z</published>
    <updated>2020-01-11T15:09:47.638Z</updated>
    
    <content type="html"><![CDATA[<p>##常用API（Application Programming Interface,应用程序编程接口）**</p><p>####1、java.util.Scanner 键盘输入</p><p>   Scanner sc=new Scanner(System.in);</p><p>  int a=sc.nextInt();//数字输入</p><p>  String str=sc.next();//字符串输入 </p><p>  System.out.printIn(“您输入的数字为：”+a+” 输入的字符串为：”+str);//控制台输出</p><p>####2、匿名对象</p><p>/*</p><p>  创建对象标准格式： 类名称  对象名=new 类名称();</p><p>  匿名对象就是只有右边的对象，没有左边的名字和赋值运算符：new 类名称()</p><p>  注：匿名对象只能使用唯一的一次，下次再用不得不再创建一个新对象，建议如果只有一个对象只需要使用唯一一次，就可以用匿名对象。</p><p>*/</p><p>  int num=new Scanner(System.in).nextInt();</p><p>   System.out.printIn(“您输入的数字为：”+num);</p><p>   //匿名对象当做方法参数进行传参</p><p>  方法名(new Scanner(System.in).nextInt());</p><p>   //匿名对象当做返回值 （Int）</p><p>   return new Scanner(System.in).nextInt();</p><p>####3、java.util.Random 随机数</p><p>  int num=r.nextInt(n);//范围 [0,n),左闭右开区间;</p><p>  int result = r.nextInt(n)+1//范围[1,n);</p><p>####4、对象数组 </p><p>/*</p><p>数组一旦创建，程序运行期间数组长度不可改变。</p><p>java.util.ArrayList,ArrayList<e>等集合创建后长度可变,”<e>“泛型</e></e></p><p>泛型只能是引用类型，不能是基本类型，集合里保存的都是地址值，基本数据类型没有地址值，存基本类型值需要使用包装对应包装类</p><p>基本类型  包装类（引用类型，包装类全都位于java.lang包下）</p><p>整型：</p><p>byte       Byte       1个字节 8位 -128~127</p><p>short       Short       2个字节 16位 (-2^15~2^15-1)</p><p>int         <strong>Integer</strong>     4个字节 32位 (-2^31~2^31-1)</p><p>long       Long       8个字节 64位 (-2^63~2^63-1)</p><p>浮点型：</p><p>float       Float       4个字节 32位 (-2^31~2^31-1)</p><p>double     Double       8个字节 64位 (-2^63~2^63-1)</p><p>注：默认的是double类型，如3.14是double类型的，加后缀F（3.14F）则为float类型的。</p><p>Char类型：</p><p>char       <strong>Character</strong>     2个字节 16位 (-2^15~2^15-1)</p><p>Boolean类型：</p><p>boolean     Boolean     （true or false）（并未指明是多少字节 1字节 1位 4字节）</p><p>从JDK 1.5+开始自动装箱、拆箱 </p><p>*/</p><p>ArrayList<string> list =new ArrayList&lt;&gt;();//JDK1.7后，右边&lt;&gt;可以省略类型</string></p><p>System.out.printIn(list);// 【】空集合是括号</p><p>####5、java.lang.String 字符串</p><p>/*</p><p>字符串的内容永不可变，常量，创建之后不能更改。（只能创建新字符串，改变变量地址值）</p><p>正是因为字符串不可改变，所以字符串是可以共享使用节省内存的。</p><p>字符串效果上相当于是char[]字符数组，但是底层原理是byte[]字节数组。</p><p>创建字符串常见方式：</p><p>public String()，创建一个空白字符串，不含有任何内容。</p><p>public String(char[] array)，根据字符数组的内容，来创建对应的字符串。</p><p>public String(byte[] array),  根据字节数组的内容，来创建对应的字符串。</p><p>String str=”Hello”；//右边引号，直接创建</p><p>字符串常量池：程序中直接写上双引号字符串，就是在字符串常量池中。</p><p>*/</p><p><img src="D:/Blog/external/img/20200111/API5.png" alt="img"></p><p>public boolean equals（Object obj）; 字符串内容比较,只有参数是一个字符串并且内容相同才会true，否则false：</p><p>任何对象都能用Object接收、equals方法具有对称性，可以将两个字符串交换位置，但如果一个是常量一个是变量，推荐常量写在前面，避免空指针异常。</p><p>public boolean equalsIgnoreCase（Object obj）; 字符串内容比较,忽略英文大小写。</p><p>String 中与获取相关的常用方法：</p><p>public int length(),获取字符串含有个数，字符串长度。</p><p>public String concat(String str),将当前字符串和参数字符串拼接返回新字符串。</p><p>public char charAt（int index），获取指定索引位置的单个字符（索引从0开始）。</p><p>public int indexOf（String str）,查找参数字符串在本字符串中首次出现的索引位置，如果没有返回-1。</p><p>String 中与截取相关的常用方法：</p><p>public String substring(int index),截取从参数位置一直到字符串末尾，返回新字符串。</p><p>public String substring(int begin,int end),获取从begin开始，一直到end，左闭右开区间</p><p>String 中与转换相关的常用方法：</p><p>public char[] toCharArray(),相当于拆分为字符数组作为返回值。</p><p>public byte[] getBytes()，获取当前字符串底层的字节数组。</p><p>public String replace(CharSequence oldString,CharSequence newString),将所有出现的老字符串代替成为新的字符串，返回处理后的新字符串。</p><p>String 中与转换分割的常用方法：</p><p>public String[] split(String regex),按照参数的规则，将字符串切分为若干部分。</p><p>注：regex 为正则表达式，注意使用“\.”分割</p><p>####6、静态static</p><p>/*</p><p>一旦使用static关键字修饰变量，那么这样的内容不再属于对象自己，而是属于类的，所以凡是本类的对象，都可以共享同一份。</p><p>一旦使用static关键字修饰成员方法，那么该方法就成为静态方法，静态方法不属于对象，而属于类的。如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用该方法。（静态方法强烈推荐使用类名称调用）</p><p>注意：静态只能访问静态，不能访问非静态。因为在内存中是先有静态内容，后有非静态内容（先人不知道后人，后人知道先人）</p><p>​       静态方法中不能用this，this表示当前对象，通过谁调用的方法，谁就是当前对象。</p><p>静态代码块:</p><p>  当第一次用到本类时，静态代码块执行唯一的一次。</p><p>  静态内容总是优先于非静态的，所以静态代码块比构造方法先执行。</p><p>  典型用途：用来一次性的对静态成员变量进行赋值。</p><p>*/</p><p>####7、java.util,Arrays,数组工具类</p><p>public static string toString(数组),将参数数组变成字符串（按照默认格式：[元素1，元素2，元素3…]）</p><p>public static void sort(数组)，按照默认顺序升序对数组的元素进行排序。</p><p>注意：如果是数值sort按照升序从小到大；如果是字符串sort按照字母升序；如果自定义类型，那么自定义的类需要有Comparable或者Comparator接口支持。</p><p>####8、java.util.Math 数学工具类</p><p>public static double abs(double num),获取绝对值。</p><p>public static double ceil(double num),向上取整。</p><p>public static double floor(double num),向下取整。</p><p>public static Long round(double num),四舍五入。</p><p>Math.PI，近似圆周率。</p><p>##<strong>继承与多态</strong></p><p>####1、继承</p><p>面向对象的三大特征：封装性、继承性、多态性。</p><p>继承是多态的前提，如果没有继承，就没有多态。</p><p>继承主要解决：共性抽取。</p><p><img src="D:/Blog/external/img/20200111/extends1_1.png" alt="img"></p><p>定义父类的格式：</p><p>public class 父类名称 {</p><p>、、、</p><p>}</p><p>定义子类的格式：</p><p>public class 子类名称 extends 父类名称 {</p><p>、、、</p><p>}</p><p>直接通过子类对象访问成员变量，等号左边是谁，就优先用谁，没有则向上找。</p><p>间接通过成员方法访问成员变量，该方法属于谁，就优先用谁，没有则向上找。</p><p>局部变量：直接写成员变量名；</p><p>本类的成员变量：this.成员变量名；</p><p>父类的成员变量：super.成员变量名；</p><p>在父子类的继承关系中，创建子类对象，访问成员方法规则:创建的对象是谁，就优先用谁，如果没有就向上找。</p><p>无论是成员方法还是成员变量，如果没有都是向上找父类，绝不会向下找之类的。</p><p>重写(Override)</p><p>概念：在继承关系当中，方法的名称一样，参数列表也一样。</p><p>重写(Override): 方法的名称一样，参数列表【也一样】，覆盖、重写。</p><p>重载(Overload): 方法的名称一样，参数列表【不一样】。</p><p>方法覆盖重写特点，创建的是子类对象，则优先用子类的方法。注意：</p><p>1、必须保证父子类之间方法的名称相同，参数列表也相同。</p><p>@Override，写在方法前面，用来检测是不是有效的正确覆盖重写。用来检测，只要满足要求，也是正确方法覆盖重写。</p><p>2、子类方法的返回值必须【小于等于】父类方法的返回值范围。（java.lang.Object类是所有类的公共最高父类）</p><p>3、子类方法的权限【大于等于】父类方法的权限修饰符。</p><p>扩展：public&gt;protected&gt;(default)&gt;private,(default)是什么都不写留空</p><p>private: Java语言中对访问权限限制的最窄的修饰符，一般称之为“私有的”。被其修饰的属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。</p><p>default：即不加任何访问修饰符，通常称为“默认访问权限“或者“包访问权限”。该模式下，只允许在同一个包中进行访问。</p><p>protected: 介于public 和 private 之间的一种访问修饰符，一般称之为“保护访问权限”。被其修饰的属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。</p><p>public： Java语言中访问限制最宽的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包访问</p><p>父子类构造方法的访问特点：<br>1、子类构造方法当中有一个默认隐含的“super()”调用，所以一定是先调用的父类构造，后执行的子类构造。</p><p>2、子类构造可以通过super关键字来调用父类重载构造。</p><p>3、super的父类构造调用，必须是子类构造方法的第一个语句，不能一个子类构造调用多次super构造。</p><p>super/this：</p><p><img src="D:/Blog/external/img/20200111/extends1_2.png" alt="img"></p><p>单继承：</p><p><img src="D:/Blog/external/img/20200111/extends1_3.png" alt="img"></p><p>####2、抽象类</p><p><img src="D:/Blog/external/img/20200111/abstract_1.png" alt="img"></p><p>抽象方法: 就是加上abstract关键字，然后去掉大括号，直接分号结束。</p><p>public abstract void 抽象方法名();</p><p>抽象内：抽象方法所在的类，必须是抽象类才行，在class 之前写上abstract即可。</p><p>public abstract class 抽象类名 {</p><p>}</p><p>1.不能直接创建new 抽象类对象；</p><p>2.必须用一个子类来继承抽象父类；</p><p>3.子类必须覆盖重写抽象父类当中所有的抽象方法。</p><p>覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号</p><p>public class 子类名 extends 抽象类名 {</p><p>}</p><p>4.创建子类对象进行使用。</p><p>注意事项：</p><p><img src="D:/Blog/external/img/20200111/abstract_2.png" alt="img"></p><p>发红包案例：</p><p><img src="........%5Cexternal%5Cimg%5C20200111%5Cabstract_3.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##常用API（Application Programming Interface,应用程序编程接口）**&lt;/p&gt;
&lt;p&gt;####1、java.util.Scanner 键盘输入&lt;/p&gt;
&lt;p&gt;   Scanner sc=new Scanner(System.in);&lt;/p
      
    
    </summary>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Markdown写作</title>
    <link href="http://yoursite.com/2020/01/01/Markdown%E5%86%99%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/01/01/Markdown写作/</id>
    <published>2020-01-01T08:25:22.000Z</published>
    <updated>2020-01-11T14:59:51.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何使用Markdown写作"><a href="#如何使用Markdown写作" class="headerlink" title="如何使用Markdown写作"></a>如何使用Markdown写作</h2><p>Markdown 是一种轻量级的「标记语言」，优点在于</p><ul><li><p>专注你的文字内容而不是排版样式。</p></li><li><p>轻松的导出 HTML、PDF 和本身的 .md 文件。</p></li><li><p>纯文本内容，兼容所有的文本编辑器与字处理软件。</p></li><li><p>可读，直观。适合所有人的写作语言。</p><p>并且具有以下特点：</p><p>自动生成目录<br>代码块高亮<br>引用展示<br>表格插入<br>图片插入<br>强调显示<br>列表显示<br>自动URL链接</p><p>Hexo下使用的MarkDown为Github的GFM，风格很漂亮，简洁美观大方。但是GFM 的MarkDown语法和标准 的MarkDown稍有不同，使用过程中需要注意一些。</p></li></ul><h4 id="语法简明概述"><a href="#语法简明概述" class="headerlink" title="语法简明概述"></a>语法简明概述</h4><ul><li><p>分段 两个回车</p></li><li><p>换行 两个空格 + 回车</p></li><li><p>标题 # ~ ######，#号的个数表示几级标题，即表示一级标题到六级标题</p></li><li><p>强调 <strong>文字</strong> ， <strong>文字</strong> ， <em>文字</em> ， <em>文字</em> ， 文字</p></li><li><p>引用 &gt; 注意后面紧跟个空格</p></li><li><p>表格 - 和 | 分割行和列 ， : 控制对其方式</p></li><li><p>代码块 四个空格 开头或， 使用</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">- 链接 [文字](链接地址)</span><br><span class="line">- 图片 ![图片说明](图片地址) ，地址可以是本地路劲，也可以是网络地址</span><br><span class="line">- 列表 * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格</span><br><span class="line"></span><br><span class="line">## 标题</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"># 欢迎使用Markdown编辑器写博客    //一级标题 对应 &lt;h1&gt; &lt;/h1&gt;</span><br><span class="line">## 标题输入                     //二级标题 对应 &lt;h2&gt; &lt;/h2&gt;</span><br><span class="line">### 三级标题                    //三级标题 对应 &lt;h3&gt; &lt;/h3&gt;</span><br><span class="line">#### 四级标题                   //四级标题 对应 &lt;h4&gt; &lt;/h4&gt;</span><br><span class="line">##### 五级标题                  //五级标题 对应 &lt;h5&gt; &lt;/h5&gt;</span><br><span class="line">###### 六级标题                 //六级标题 对应 &lt;h6&gt; &lt;/h6&gt;</span><br><span class="line">####### 七级标题                //抱歉，木有了（但是他会影响生成的目录，目录行多出一行空行）</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">这里不做展示了，影响目录的展示。</span><br><span class="line"></span><br><span class="line">## 内容强调</span><br><span class="line">### 加粗、斜体</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">字体 **加粗** 显示</span><br><span class="line">字体 *斜体* 显示</span><br><span class="line">字体 ***加粗并斜体*** 显示</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">字体 __加粗__ 显示</span><br><span class="line">字体 _斜体_ 显示</span><br><span class="line">字体 ___加粗并斜体___ 显示</span><br><span class="line">组合 *__加粗并斜体__* 显示</span><br><span class="line"></span><br><span class="line">### 删除线</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">这样来 ~~删除一段文本~~</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">### 高亮</span><br><span class="line"></span><br><span class="line">使用&lt;code&gt;\`&lt;/code&gt;来强调字符   //想打出  ` (反引号)需要转义的，加&lt;code&gt;&lt;/code&gt;标签强调</span><br><span class="line">比如`突出背景色`来显示强调效果</span><br><span class="line"></span><br><span class="line">### 引用显示</span><br><span class="line"></span><br><span class="line">引用过程中任然支持Markdown语法！</span><br><span class="line">标准使用</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&gt; 每行开始都使用 &apos;&gt;&apos;；</span><br><span class="line">&gt; 引用**开始**；</span><br><span class="line">&gt; 引用**换行**；</span><br><span class="line">&gt; 引用**结束**。</span><br><span class="line"></span><br><span class="line">&gt; 还在引用中！</span><br><span class="line"></span><br><span class="line">`两个回车`结束引用！</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&gt; 仅第一行加应用；</span><br><span class="line">引用**开始**；</span><br><span class="line">引用**换行**；</span><br><span class="line">引用**结束**；</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">两个回车结束引用,不在引用范围内了！</span><br><span class="line"></span><br><span class="line">嵌套使用</span><br><span class="line"></span><br><span class="line">&gt; 动物</span><br><span class="line">&gt;&gt; 水生动物</span><br><span class="line">&gt;&gt; 陆生动物</span><br><span class="line">&gt;&gt;&gt; 猴子</span><br><span class="line">&gt;&gt;&gt; 人</span><br><span class="line">&gt;&gt;&gt;&gt; 程序猿</span><br><span class="line">&gt;&gt;&gt;&gt; 攻城狮</span><br><span class="line">&gt;&gt;产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记</span><br><span class="line">射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记</span><br><span class="line"></span><br><span class="line">&gt;&gt; 两栖类动物</span><br><span class="line">&gt;&gt;&gt; 大鳄鱼</span><br><span class="line">唐老鸭</span><br><span class="line"></span><br><span class="line">两个回车结束引用,不在引用范围内了！</span><br><span class="line"></span><br><span class="line">表格语法：</span><br><span class="line"></span><br><span class="line">列1   | 列2 | 列3 </span><br><span class="line">----- | --- | ---- </span><br><span class="line">第1行 | 12  | 13  </span><br><span class="line">第2行 | 22  | 23  </span><br><span class="line">第3行 | 32  | 33  </span><br><span class="line"></span><br><span class="line">可以使用冒号来定义对齐方式：</span><br><span class="line"></span><br><span class="line">| 左对齐    |  右对齐 | 居中 |</span><br><span class="line">| :-------- | -------:| :--: |</span><br><span class="line">| Computer  | 5000 元 |  1台 |</span><br><span class="line">| Phone     | 1999 元 |  1部 |</span><br><span class="line"></span><br><span class="line">### 代码块</span><br><span class="line"></span><br><span class="line">代码块语法遵循标准 markdown 代码，使用 ``` 接上语言名称 开始 ， ``` 结束 例如：</span><br><span class="line"></span><br><span class="line">​```Python</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">print &apos;Hello World!</span><br></pre></td></tr></table></figure><p>链接：   <a href="http://qinsanz.cn/" target="_blank" rel="noopener">首页</a></p><p>图片：<img src="........%5Cexternal%5Cimg%5Cwx.png" alt="微信扫我"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何使用Markdown写作&quot;&gt;&lt;a href=&quot;#如何使用Markdown写作&quot; class=&quot;headerlink&quot; title=&quot;如何使用Markdown写作&quot;&gt;&lt;/a&gt;如何使用Markdown写作&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级的「标记语言」
      
    
    </summary>
    
    
      <category term="写作练习" scheme="http://yoursite.com/tags/%E5%86%99%E4%BD%9C%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/06/03/JAVA%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/06/03/JAVA面试题/</id>
    <published>2019-06-03T10:38:03.352Z</published>
    <updated>2020-01-01T08:20:04.637Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: JAVA面试题<br>date: 2019-06-03 18:33:17<br>tags:   Java Web基础面试题整理<br>1、什么是Servlet？</p><p>可以从两个方面去看Servlet：</p><p>​    a、API：有一个接口servlet，它是servlet规范中定义的用来处理客户端请求的程序需要实现的顶级接口。</p><p>​    b、组件：服务器端用来处理客户端请求的组件，需要在web.xml文件中进行配置。</p><p>2、Servlet的生命周期，并说出Servlet和CGI的区别？</p><p>​    servlet有良好的生存期的定义，包括加载和实例化、初始化、处理请求以及服务结束。</p><p>​          这个生存期由javax.servlet.servlet接口中的init、service、destroy方法表达。</p><p>​         web容器加载servlet，生命周期开始。通过调用servlet的init()方法进行servlet的初始化。通过调用service()方法实现根据请求的不同调用不同的do**()方法。结束服务，web容器调用servlet的destroy()方法。</p><pre><code>区别：</code></pre><p>​    Servlet处于服务器进程中，它通过多线程运行service()方法，一个实例可以服务于多个请求，并且实例一般不会被销毁；而CGI对每个请求都产生一个新的进程，服务完成后就销毁，所有效率低于Servlet</p><p>3、Servlet接口中有哪些方法？</p><p>Servlet接口定义了5个方法：</p><p>void init(ServletConfig config) throws ServletException</p><p>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException</p><p>void destory()</p><p>java.lang.String getServletInfo()</p><p>ServletConfig getServletConfig()</p><p>4、get和post请求的区别？</p><p>a、get是用来从服务器上获取数据，而post是用来向服务器传递数据；</p><p>b、get将表单中数据按照variable=value的形式，添加到action所指向的URL后面，并且两者用”？”连接，变量之间用”&amp;”连接；而post是将表单中的数据放在form的数据体中，按照变量与值对应的方式，传递到action所指定的URL。</p><p>c、get是不安全的，因为在传输过程中，数据是被放在请求的URL中;而post的所有操作对用户来说都是不可见的。</p><p>d、get传输的数据量小，这主要应为受url长度限制;而post可以传输大量的数据，所有上传文件只能用post提交。</p><p>e、get限制form表单的数据集必须为ASCII字符；而post支持整个IS01 0646字符集。</p><p>f、get是form表单的默认方法。</p><p>5、什么情况下调用doGet()和doPost()？</p><p>默认情况是调用doGet()方法，JSP页面中的Form表单的method属性设置为post的时候，调用的为doPost()方法；为get的时候，调用deGet()方法。</p><p>6、转发（Forward）和重定向（Redirect）的区别？</p><p>转发是服务器行为，重定向是客户端行为。</p><p>转发（Forword）</p><p>通过RequestDispatcher对象的forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher可以通过HttpServletRequest 的getRequestDispatcher()方法获得。例如下面的代码就是跳转到login_success.jsp页面。</p><p>request.getRequestDispatcher(“login_success.jsp”).forward(request, response);</p><p>重定向（Redirect） 是利用服务器返回的状态吗来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过HttpServletRequestResponse的setStatus(int status)方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。</p><ol><li>从地址栏显示来说</li></ol><p>forward是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器。浏览器根本不知道服务器发送的内容从哪里来的，所以它的地址栏还是原来的地址。<br>redirect是服务端根据逻辑，发送一个状态码,告诉浏览器重新去请求那个地址，所以地址栏显示的是新的URL。</p><ol start="2"><li>从数据共享来说</li></ol><p>forward：转发页面和转发到的页面可以共享request里面的数据.<br>redirect：不能共享数据.</p><ol start="3"><li>从运用地方来说</li></ol><p>forward：一般用于用户登陆的时候,根据角色转发到相应的模块.<br>redirect：一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p><ol start="4"><li>从效率来说</li></ol><p>forward：高.<br>redirect：低.</p><p>7、自动刷新（Refresh）</p><p>自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Servlet中通过HttpServletResponse对象设置Header属性实现自动刷新例如：</p><p>Response.setHeader(“Refresh”,”1000;URL=<a href="http://localhost:8080/servlet/example.htm&quot;" target="_blank" rel="noopener">http://localhost:8080/servlet/example.htm&quot;</a>);</p><p>其中1000为时间，单位为毫秒。URL指定就是要跳转的页面（如果设置自己的路径，就会实现没过一秒自动刷新本页面一次）</p><p>8、Servlet与线程安全</p><p>Servlet不是线程安全的，多线程并发的读写会导致数据不同步的问题。 解决的办法是尽量不要定义name属性，而是要把name变量分别定义在doGet()和doPost()方法内。虽然使用synchronized(name){}语句块可以解决问题，但是会造成线程的等待，不是很科学的办法。<br>注意：多线程的并发的读写Servlet类属性会导致数据不同步。但是如果只是并发地读取属性而不写入，则不存在数据不同步的问题。因此Servlet里的只读属性最好定义为final类型的。</p><p>9、JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？</p><p>JSP是Servlet的扩展，本质上是Servlet的简易方式，更强调应用的外表表达。JSP编译后是”类Servlet”。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在java文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是java和HTML可以组合成一个扩展名为.jsp的文件。JSP偏重于视图，Servlet偏重于业务逻辑。</p><p>10、JSP工作原理：</p><p>JSP是一种Servlet，但是与HttpServlet的工作方式不太一样。HttpServlet是先由源代码编译为class文件后部署到服务器下，为先编译后部署。而JSP则是先部署后编译。JSP会在客户端第一次请求JSP文件时被编译为HttpJspPage类（接口Servlet的一个子类）。该类会被服务器临时存放在服务器工作目录里面。下面通过实例给大家介绍。</p><p>工程JspLoginDemo下有一个名为login.jsp的Jsp文件，把工程第一次部署到服务器上后访问这个Jsp文件，我们发现这个目录下多了下图这两个东东。<br>.class文件便是JSP对应的Servlet。编译完毕后再运行class文件来响应客户端请求。以后客户端访问login.jsp的时候，Tomcat将不再重新编译JSP文件，而是直接调用class文件来响应客户端请求。</p><p>由于JSP只会在客户端第一次请求的时候被编译 ，因此第一次请求JSP时会感觉比较慢，之后就会感觉快很多。如果把服务器保存的class文件删除，服务器也会重新编译JSP。</p><p>开发Web程序时经常需要修改JSP。Tomcat能够自动检测到JSP程序的改动。如果检测到JSP源代码发生了改动。Tomcat会在下次客户端请求JSP时重新编译JSP，而不需要重启Tomcat。这种自动检测功能是默认开启的，检测改动会消耗少量的时间，在部署Web应用的时候可以在web.xml中将它关掉。</p><p>11、Request对象的主要方法有哪些？</p><p>setAttribute(String name,Object)：设置名字为name的request 的参数值</p><p>getAttribute(String name)：返回由name指定的属性值</p><p>getAttributeNames()：返回request 对象所有属性的名字集合，结果是一个枚举的实例</p><p>getCookies()：返回客户端的所有 Cookie 对象，结果是一个Cookie 数组</p><p>getCharacterEncoding() ：返回请求中的字符编码方式 = getContentLength() ：返回请求的 Body的长度</p><p>getHeader(String name) ：获得HTTP协议定义的文件头信息</p><p>getHeaders(String name) ：返回指定名字的request Header 的所有值，结果是一个枚举的实例</p><p>getHeaderNames() ：返回所以request Header 的名字，结果是一个枚举的实例</p><p>getInputStream() ：返回请求的输入流，用于获得请求中的数据</p><p>getMethod() ：获得客户端向服务器端传送数据的方法</p><p>getParameter(String name) ：获得客户端传送给服务器端的有 name指定的参数值</p><p>getParameterNames() ：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例</p><p>getParameterValues(String name)：获得有name指定的参数的所有值</p><p>getProtocol()：获取客户端向服务器端传送数据所依据的协议名称</p><p>getQueryString() ：获得查询字符串</p><p>getRequestURI() ：获取发出请求字符串的客户端地址</p><p>getRemoteAddr()：获取客户端的 IP 地址</p><p>getRemoteHost() ：获取客户端的名字</p><p>getSession([Boolean create]) ：返回和请求相关 Session</p><p>getServerName() ：获取服务器的名字</p><p>getServletPath()：获取客户端所请求的脚本文件的路径</p><p>getServerPort()：获取服务器的端口号</p><p>removeAttribute(String name)：删除请求中的一个属性</p><p>12、request.getAttribute()和 request.getParameter()有何区别？</p><p>a、request.getParameter()获取的类型是String；request.getAttribute()获取的类型是Object。</p><p>b、request.getPrameter()获取的是POST/GET传递的参数值和URL中的参数；request.getAttribute()获取的是对象容器中的数据值/对象。</p><p>c、request.setAttribute()和request.getAttribute()可以发送、接收对象；request.getParamter()只能接收字符串，官方不开放request.setParamter()（也就是没有这个方法）。</p><p>​    </p><p>setAttribute()和getAttribute()的传参原理：</p><p>setAttribute()是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另外一个页面时，应用服务器会把这块内存拷贝到另一个页面所对应的那块内存中。这个就可以通过getAttribute()获取到相应的参数值或者对象。</p><p>13、JSP中动态include和静态include的区别？</p><p>a、静态include：语法：&lt;%@ include file=”文件名” %&gt;，相当于复制，编辑时将对应的文件包含进来，当内容变化时，不会再一次对其编译，不易维护。</p><p>​        </p><p>b、动态include：语法：&lt;jsp:include page=”文件名”&gt;,能够自动检查被包含文件，当客户端对JSP文件进行请求时，会重新将对应的文件包含进来，进行实时的更新。</p><p>14、JSP有哪些内置对象？作用分别是什么？</p><p>JSP一共有9个内置对象：</p><p>request：负责得到客户端请求的信息，对应类型：javax.servlet.http.HttpServletRequest</p><p>response:负责向客户端发出响应，对应类型：javax.servlet.http.HttpServletResponse</p><p>session:负责保存同一客户端一次会话过程中的一些信息，对应类型：javax.servlet.http.httpsession</p><p>out：负责管理对客户端的输出，对应类型：javax.serlvet.jsp.jspwriter</p><p>application:表示整个应用环境的信息，对应类型：javax.servlet.servletcontext</p><p>config:表示ServletConfig，对应类型：javax.servlet.servletconfig</p><p>exception:表示页面中发生的异常，可以通过它获得页面异常信息，对应类型：java.lang.exception</p><p>pagecontext:表示这个JSP页面上下文，对应类型：javax.servlet.jsp.pagecontext</p><p>page:表示当前JSP页面本身。</p><p>15、JSP有哪些动作？作用分别是什么？</p><p>JSP一共有以下6中基本动作：</p><p>JSP：include       （当页面被请求的时候引入一个文件）</p><p>JSP：forward      （将请求转到另一个页面）</p><p>JSP：useBean     （获得JavaBean的一个实例）</p><p>JSP：setProperty （设置JavaBean的属性）</p><p>JSP：getProperty （获得JavaBean的属性）</p><p>JSP：plugin         （根据浏览器类型为Java插件生成object或者embed两种标记）</p><p>16、JSP常用指令有哪些？</p><p>page、include、taglib</p><p>a、page指令：定义页面的一些属性。</p><p>常用属性：</p><p>contentType=”text/html;charset=utf-8”;    向浏览器端输出数据的编码</p><p>pageEncoding=”utf-8”;                            JSP编译成java文件时所用的编码</p><p>session=”true”                                        是否自动创建session</p><p>b、include指令：引入一个静态的JSP页面</p><p>c、taglib指令：引入一个标签库</p><p>17、讲解JSP中的四种作用域</p><p>JSP中的四种作用域包括page、request、session和application，具体来说：</p><p>a、page是代表一个页面相关的对象和属性。一个页面由一个编译好的java servlet类（可以带有include指令，但不可以带有include动作）表示。这既包括servlet又包括编译成servlet的jsp页面。</p><p>​      </p><p>b、request是代表与web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个web组件（由于forware指令和include动作的关系）</p><p>​      </p><p>c、session是代表与用于某个web客户机的一个用户体验相关的对象和属性。一个web回话也可以经常跨域多个客户机请求。</p><p>​      </p><p>d、application是代表与整个web应用程序相关的对象和属性。这实质上是跨域整个web应用程序，包括多个页面、请求和回话的一个全局作用域。</p><p>18、如何实现JSP或Servlet的单线程模式？</p><p>在JSP中使用page指令进行设置，具体代码如下：</p><p>&lt;%@page isThreadSafe=”false”%&gt;</p><p>对于Servlet，可以让自定义的Servlet实现SingleThreadModel标识接口。</p><p>说明：如果将JSP或Servlet设置成单线程工作模式，会导致每个请求创建一个Servlet实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p><p>19、JSP乱码如何解决？</p><p>a、JSP页面乱码：&lt;%@page contentType=”text/html;charset=utf-8” %&gt;</p><p>​     </p><p>b、表单提交时出现乱码：request.setCharacterEncoding(“utf-8”);</p><p>​     </p><p>c、数据库出现乱码：jdbc:mysql://localhost:3306:/user?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8;</p><p>​     </p><p>其实我一般的处理的方法就是配置一个过滤器对每个JSP页面进行字符集处理。</p><p>20、实现会话跟踪的技术有哪些？</p><ol><li>使用Cookie</li></ol><p>向客户端发送Cookie</p><p>Cookie c =new Cookie(“name”,”value”); //创建Cookie<br>c.setMaxAge(60<em>60</em>24); //设置最大时效，此处设置的最大时效为一天<br>response.addCookie(c); //把Cookie放入到HTTP响应中</p><p>从客户端读取Cookie</p><p>String name =”name”;<br>Cookie[]cookies =request.getCookies();<br>if(cookies !=null){<br>  for(int i= 0;i&lt;cookies.length;i++){<br>   Cookie cookie =cookies[i];<br>   if(name.equals(cookis.getName()))<br>   //something is here.<br>   //you can get the value<br>   cookie.getValue(); </p><p>  }<br>}</p><p>优点: 数据可以持久保存，不需要服务器资源，简单，基于文本的Key-Value</p><p>缺点: 大小受到限制，用户可以禁用Cookie功能，由于保存在本地，有一定的安全风险。</p><ol start="2"><li>URL 重写</li></ol><p>在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。</p><p>优点： 在Cookie被禁用的时候依然可以使用</p><p>缺点： 必须对网站的URL进行编码，所有页面必须动态生成，不能用预先记录下来的URL进行访问。</p><ol start="3"><li>隐藏的表单域</li></ol><input type="hidden" name="session" value="..."><p>优点： Cookie被禁时可以使用</p><p>缺点： 所有页面必须是表单提交之后的结果。</p><ol start="4"><li>HttpSession</li></ol><p>在所有会话跟踪技术中，HttpSession对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建 HttpSession，每个用户可以访问他自己的HttpSession。可以通过HttpServletRequest对象的getSession方 法获得HttpSession，通过HttpSession的setAttribute方法可以将一个值放在HttpSession中，通过调用 HttpSession对象的getAttribute方法，同时传入属性名就可以获取保存在HttpSession中的对象。与上面三种方式不同的 是，HttpSession放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的Servlet容器可以在内存将满时将HttpSession 中的对象移到其他存储设备中，但是这样势必影响性能。添加到HttpSession中的值可以是任意Java对象，这个对象最好实现了 Serializable接口，这样Servlet容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p><p>21、Cookie和Session的的区别？</p><p>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</p><p>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</p><p>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</p><p>22、什么是Tomcat？</p><p>Tomcat是一种web服务器，java编写的web项目可以部署在上面，用户在客户端请求时，都是将请求发到Tomcat上，Tomcat在将请求发到对应的项目上。</p><p>23、 详细描述MVC</p><p>基于java的web应用系统采用MVC设计模型，即用Model（模型）、View（视图）和Controller（控制）分离设计，这是目前web应用服务系统的主流设置方向。</p><p>​      </p><p>Model：处理业务逻辑的模块。</p><p>​      </p><p>View：负责页面显示，显示Model的处理结果给用户，主要实现数据到页面的转换过程。</p><p>​      </p><p>Controller：负责每个请求的分发，把Form数据传递给Model进行处理，处理完成后，把处理结果返回给相应的View显示给用户。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: JAVA面试题&lt;br&gt;date: 2019-06-03 18:33:17&lt;br&gt;tags:   Java Web基础面试题整理&lt;br&gt;1、什么是Servlet？&lt;/p&gt;
&lt;p&gt;可以从两个方面去看Servlet：&lt;/p&gt;
&lt;p&gt;​    a、API：有
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/05/26/hello-world/"/>
    <id>http://yoursite.com/2019/05/26/hello-world/</id>
    <published>2019-05-26T07:03:35.939Z</published>
    <updated>2019-05-26T07:03:35.939Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
